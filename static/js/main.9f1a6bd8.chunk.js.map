{"version":3,"sources":["img/venom-1.jpg","img/hulk-1.jpg","img/venom-2.jpg","components/Navbar.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","Header","type","placeholder","src","image1","alt","image2","image3","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,0KCG5B,SAASC,IACpB,OACI,yBAAKC,UAAU,UACjB,yBAAKA,UAAU,aACb,uBAAGC,KAAK,KAAR,QAEA,uBAAGA,KAAK,IAAID,UAAU,kBAAtB,SACA,uBAAGC,KAAK,KAAR,W,iFCDaC,G,yLAEjB,OACE,4BAAQF,UAAU,UAChB,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,oBACA,uBAAGA,UAAU,YAAb,4FAIA,yBAAKA,UAAU,cACb,2BAAOG,KAAK,SAASC,YAAY,YAInC,yBAAKJ,UAAU,oBAEb,6BAASA,UAAU,aACjB,yBAAKK,IAAKC,IAAQC,IAAI,eAAeP,UAAU,eAIjD,6BAASA,UAAU,aACjB,yBAAKK,IAAKG,IAAQD,IAAI,eAAeP,UAAU,eAIjD,6BAASA,UAAU,aACjB,yBAAKK,IAAKI,IAAQF,IAAI,eAAeP,UAAU,sB,GA5BzBU,cCIrBC,MATf,WACE,OACE,oCACE,kBAACZ,EAAD,MACA,kBAAC,EAAD,QCIca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9f1a6bd8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/venom-1.294dd39b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hulk-1.5f1cd582.jpg\";","module.exports = __webpack_public_path__ + \"static/media/venom-2.5eb62fe8.jpg\";","import React from 'react'\nimport '../css/layout.css'\n\nexport default function Navbar() {\n    return (\n        <nav className=\"navbar\">\n      <div className=\"container\"> \n        <a href=\"#\">Hulk</a>\n        {/* <!-- Currently Active -->       */}\n        <a href=\"#\" className=\"logo is-active\">Mavel</a>\n        <a href=\"#\">Venom</a>\n      </div>\n    </nav>\n    )\n}\n","import React, { Component } from \"react\";\nimport image1 from \"../img/venom-1.jpg\";\nimport image2 from \"../img/hulk-1.jpg\";\nimport image3 from \"../img/venom-2.jpg\";\nimport \"../css/components.css\";\nimport \"../css/global.css\";\nimport \"../css/layout.css\";\nimport \"../css/sample-wallpaper.css\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <header className=\"header\">\n        <div className=\"container\">\n          <h1 className=\"title\">Mavel's Fearless</h1>\n          <p className=\"subtitle\">\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. beatae\n            molestias earum eveniet.\n          </p>\n          <div className=\"search-bar\">\n            <input type=\"search\" placeholder=\"Search\" />\n          </div>\n\n          {/* <!-- Sample Wallpaper --> */}\n          <div className=\"sample-wallpaper\">\n            {/* <!-- Wallpaper #1 --> */}\n            <article className=\"wallpaper\">\n              <img src={image1} alt=\"Wallpaper #1\" className=\"wallpaper\" />\n            </article>\n\n            {/* <!-- Wallpaper #2 --> */}\n            <article className=\"wallpaper\">\n              <img src={image2} alt=\"Wallpaper #1\" className=\"wallpaper\" />\n            </article>\n\n            {/* <!-- Wallpaper #3 --> */}\n            <article className=\"wallpaper\">\n              <img src={image3} alt=\"Wallpaper #1\" className=\"wallpaper\" />\n            </article>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n","import React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <>\n      <Navbar></Navbar>\n      <Header></Header>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}